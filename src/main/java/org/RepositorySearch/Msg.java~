/*******************************************************************************
 * Copyright (c) 2010, 2011 Tran Nam Quang.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Tran Nam Quang - initial API and implementation
 *    Johannes Gerbershagen - Messages for repository search application
 *******************************************************************************/

package org.RepositorySearch;

import java.io.File;
import java.io.IOException;
import java.text.MessageFormat;
import java.util.ResourceBundle;
import java.util.Locale;
import java.util.MissingResourceException;

import net.sourceforge.docfetcher.util.AppUtil;
import net.sourceforge.docfetcher.util.ClassPathHack;
import net.sourceforge.docfetcher.util.Util;
import net.sourceforge.docfetcher.util.annotations.NotNull;

public enum Msg {
    
    initialize_log("Cannot create the directory {0} for the log files."),
    MandatoryFields("The fields html_url and description are mandatory in this select statement.Please supplie both.\n If you use a as clause, please choose html_url and description as the label."),
    ERROR("[ERROR]"),
    foundResults("Found {0} repositories.")
    ;
    
    private static boolean checkEnabled = true;
    private String value;
    private final String comment;
	
	Msg(@NotNull String defaultValue) {
		this(defaultValue, "");
	}
	
	Msg(@NotNull String defaultValue, @NotNull String comment) {
	    if(defaultValue == null || comment == null){
		throw new IllegalArgumentException();
	    }
	    this.value = defaultValue;
	    this.comment = comment;
	}
	
	@NotNull
	public String get() {
		assert !checkEnabled || !value.contains("{0}");
		return value;
	}
	
	@NotNull
	public String getComment() {
		return comment;
	}
	
	/**
	 * Returns a string created from a <tt>java.text.MessageFormat</tt>
	 * with the given argument(s).
	 */
	public String format(Object... args) {
		String val = value.replace("'", "''"); // See bug #4293229 in Java bug database
		return MessageFormat.format(val, args);
	}
	
	public static void setCheckEnabled(boolean checkEnabled) {
		Msg.checkEnabled = checkEnabled;
	}
	
	public static void loadFromDisk() {
		try {
			final File langDir;						
			langDir = new File("lang");
			ClassPathHack.addFile(langDir);
			
			/*
			 * Notes: (1) The translated strings must be trimmed, because
			 * translators sometimes accidentally add newlines. (2) Replacing
			 * the character \\u00BB with tabs is necessary because those tabs
			 * somehow get replaced with \\u00BB after going through
			 * transifex.com.
			 */
			ResourceBundle bundle = ResourceBundle.getBundle("Resource");
			for (Msg msg : Msg.values())
				if (bundle.containsKey(msg.name()))
					msg.value = bundle.getString(msg.name()).trim().replace('\u00BB', '\t');
		} catch (MissingResourceException e) {
			/*
			 * The English language strings are hard-coded, so there's no
			 * English bundle, which causes this exception.
			 */
		}catch(IOException e){
		    RSLogger.LogExceptionMessage(e, "try to read the language resource");
		}
	}
}	
